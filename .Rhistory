plot(cars)
plot(cars)
plot(cars)
library(rpart)
DTree <- rpart(Survived ~ Sex + Age + Siblings.and.Spouses + Fare + Midpoint.age + Parents.and.Children , method = "class")
summary(DTree)
library(rpart.plot)
rpart.plot(DTree)
plot(cars)
TrainingSet <- read.csv("~/Downloads/Chapter11Exercise_TrainingData (1).csv")
View(TrainingSet)
ScoringSet <- read.csv("~/Downloads/Chapter11Scoring.csv")
View(ScoringSet)
attach(TrainingSet)
install.packages("nnet")
library("nnet")
View(ScoringSet)
library(nnet)
set.seed(1000)
nnet(Credit_Risk ~ Credit_Score + Late_Payments + Months_In_Job +
Debt_Income_Ratio + Loan_Amt + Liquid_Assets + Num_Credit_Lines, data=TrainingSet, size=8, maxit=10000 )
library(nnet)
set.seed(1000)
NeuralNetwork1 <- nnet(Credit_Risk ~ Credit_Score + Late_Payments + Months_In_Job +
Debt_Income_Ratio + Loan_Amt + Liquid_Assets + Num_Credit_Lines, data=TrainingSet, size=8, maxit=10000 )
View(NeuralNetwork1)
NeuralNetPredict <- predict(NeuralNetwork1, ScoringSet,
type = "class")
Results <- data.frame(NeuralNetPredict,ScoringSet)
View(Results)
git init
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
install.packages("car")
install.packages("rfm")
install.packages("rfm")
library("rfm")
TrainingSet <- rfm_data_customer
View(TrainingSet)
analysis_date <- lubridate::as_date("2006-12-31", tz = "UTC")
library("rfm")
set.seed(12)
customer_ID <- sample(1:500, 500, rep = TRUE)
sales_date <- sample(seq(as.Date('2016/01/01'), as.Date('2017/12/01'), by="day"), 500)
sales <- sample(20:400, 500, rep = TRUE)
bmdata <- data.frame (customer_ID,sales_date,sales)
head(bmdata)
library("rfm")
set.seed(12)
customer_ID <- sample(1:500, 500, rep = TRUE)
sales_date <- sample(seq(as.Date('2016/01/01'), as.Date('2017/12/01'), by="day"), 500)
sales <- sample(20:400, 500, rep = TRUE)
bmdata <- data.frame (customer_ID,sales_date,sales)
View(bmdata)
library("rfm")
set.seed(12)
customer_ID <- sample(1:500, 500, rep = TRUE)
sales_date <- sample(seq(as.Date('2016/01/01'), as.Date('2017/12/01'), by="day"), 500)
sales <- sample(20:400, 500, rep = TRUE)
bmdata <- data.frame (customer_ID,sales_date,sales)
head(bmdata)
bmdata$Recency <- round(as.numeric(difftime(Sys.Date(),bmdata[,2],unit="days")))
bmdataR <- aggregate(bmdata[,4],list(bmdata$customer_ID),min)
names(bmdataR) <- c("customer_ID","Recency")
# frequency
bmdataF <- aggregate(bmdata[,2],list(bmdata$customer_ID),length)
names(bmdataF) <- c("customer_ID","Frequency")
# monetary
bmdataM <- aggregate(bmdata[,3],list(bmdata$customer_ID),sum)
names(bmdataM) <- c("customer_ID","Monetary")
# RFM dataframe
bmdataRFM <-merge(merge(bmdataR,bmdataF),bmdataM)
# this is commented because I've not used it.
# bmdataRFM$salespervisit <- bmdataRFM$Monetary/bmdataRFM$Frequency
# here the ranks
bmdataRFM$rankR <- cut(bmdataRFM$Recency,5,labels=F)
bmdataRFM$rankF <- cut(bmdataRFM$Frequency,5,labels=F)
bmdataRFM$rankM <- cut(bmdataRFM$Monetary,5,labels=F)
head(bmdata)
bmdata$Recency <- round(as.numeric(difftime(Sys.Date(),bmdata[,2],unit="days")))
bmdataR <- aggregate(bmdata[,4],list(bmdata$customer_ID),min)
names(bmdataR) <- c("customer_ID","Recency")
# frequency
bmdataF <- aggregate(bmdata[,2],list(bmdata$customer_ID),length)
names(bmdataF) <- c("customer_ID","Frequency")
# monetary
bmdataM <- aggregate(bmdata[,3],list(bmdata$customer_ID),sum)
names(bmdataM) <- c("customer_ID","Monetary")
# RFM dataframe
bmdataRFM <-merge(merge(bmdataR,bmdataF),bmdataM)
# this is commented because I've not used it.
# bmdataRFM$salespervisit <- bmdataRFM$Monetary/bmdataRFM$Frequency
# here the ranks
bmdataRFM$rankR <- cut(bmdataRFM$Recency,5,labels=F)
bmdataRFM$rankF <- cut(bmdataRFM$Frequency,5,labels=F)
bmdataRFM$rankM <- cut(bmdataRFM$Monetary,5,labels=F)
head(bmdata)
head(bmdataRFM)
library("rfm")
set.seed(12)
customer_ID <- sample(1:500, 500, rep = TRUE)
sales_date <- sample(seq(as.Date('2016/01/01'), as.Date('2017/12/01'), by="day"), 500)
sales <- sample(20:400, 500, rep = TRUE)
bmdata <- data.frame (customer_ID,sales_date,sales)
head(bmdata)
bmdata$Recency <- round(as.numeric(difftime(Sys.Date(),bmdata[,2],unit="days")))
head(bmdata$Recency)
# RFM dataframe
bmdataRFM <-merge(merge(bmdataR,bmdataF),bmdataM)
bmdataRFM$rankR <- cut(bmdataRFM$Recency,5,labels=F)
bmdataRFM$rankF <- cut(bmdataRFM$Frequency,5,labels=F)
bmdataRFM$rankM <- cut(bmdataRFM$Monetary,5,labels=F)
head(bmdataRFM)
library(nnet)
attach(ScoringSet)
Chapter11Scoring <- read.csv("~/Desktop/PersonalProjects/RProjects/Neural Network/Chapter11Scoring.csv")
View(Chapter11Scoring)
library(nnet)
ScoringSet <- read.csv("~/Desktop/PersonalProjects/RProjects/Neural Network/Chapter11Scoring.csv")
attach(ScoringSet)
set.seed(1000)
NeuralNetwork1 <- nnet(Credit_Risk ~ Credit_Score + Late_Payments + Months_In_Job +
Debt_Income_Ratio + Loan_Amt + Liquid_Assets + Num_Credit_Lines, data=TrainingSet, size=8, maxit=10000 )
library(nnet)
ScoringSet <- read.csv("~/Desktop/PersonalProjects/RProjects/Neural Network/Chapter11Scoring.csv")
TrainingSet <- read.csv("/Users/marcdelacruz/Desktop/PersonalProjects/RProjects/Neural Network/Chapter11Exercise_TrainingData (1).csv")
attach(ScoringSet)
set.seed(1000)
NeuralNetwork1 <- nnet(Credit_Risk ~ Credit_Score + Late_Payments + Months_In_Job +
Debt_Income_Ratio + Loan_Amt + Liquid_Assets + Num_Credit_Lines,
data=, size=8, maxit=10000 )
NeuralNetPredict <- predict(NeuralNetwork1, ScoringSet,
type = "class")
head(TrainingSet)
library(nnet)
ScoringSet <- read.csv("~/Desktop/PersonalProjects/RProjects/Neural Network/Chapter11Scoring.csv")
TrainingSet <- read.csv("/Users/marcdelacruz/Desktop/PersonalProjects/RProjects/Neural Network/Chapter11Exercise_TrainingData (1).csv")
attach(ScoringSet)
set.seed(1000)
NeuralNetwork1 <- nnet(Credit_Risk ~ Credit_Score + Late_Payments + Months_In_Job +
Debt_Income_Ratio + Loan_Amt + Liquid_Assets + Num_Credit_Lines,
data=, size=8, maxit=10000 )
detach(ScoringSet)
detach(ScoringSet)
library(nnet)
ScoringSet <- read.csv("~/Desktop/PersonalProjects/RProjects/Neural Network/Chapter11Scoring.csv")
TrainingSet <- read.csv("/Users/marcdelacruz/Desktop/PersonalProjects/RProjects/Neural Network/Chapter11Exercise_TrainingData (1).csv")
attach(ScoringSet)
set.seed(1000)
NeuralNetwork1 <- nnet(Credit_Risk ~ Credit_Score + Late_Payments + Months_In_Job +
Debt_Income_Ratio + Loan_Amt + Liquid_Assets + Num_Credit_Lines,
data=, size=8, maxit=10000 )
library(nnet)
ScoringSet <- read.csv("~/Desktop/PersonalProjects/RProjects/Neural Network/Chapter11Scoring.csv")
TrainingSet <- read.csv("/Users/marcdelacruz/Desktop/PersonalProjects/RProjects/Neural Network/Chapter11Exercise_TrainingData (1).csv")
attach(ScoringSet)
set.seed(1000)
NeuralNetwork1 <- nnet(Credit_Risk ~ Credit_Score + Late_Payments + Months_In_Job +
Debt_Income_Ratio + Loan_Amt + Liquid_Assets + Num_Credit_Lines,
data=, size=8, maxit=10000 )
install.packages("e1071")
library(readxl)
FullDataset <- read_excel("Exam 2 Data - Fall 2019.xlsx",
col_types = c("numeric", "numeric", "numeric",
"numeric", "text", "text", "text",
"text", "text"))
View(FullDataset)
attach(FullDataset)
View(FullDataset)
library(readxl)
LGTrainSet <- read_excel("Exam 2 Data - Fall 2019.xlsx",
sheet = "QA Tests")
View(LGTrainSet)
library(readxl)
LGScore <- read_excel("Exam 2 Data - Fall 2019.xlsx",
sheet = "QA Predictions")
View(LGScore)
attach(LGTrainSet)
head(LGTrainSet)
head(LGTrainSet)
attach(LGScore)
LG1 <- glm(QAResult ~ FreezePoint + MeltPoint + PressureResistance + BluntForceResistance + TorqueTest + TestsPerformedBeforeBreakage, family = "numeric")
head(LGTrainSet)
attach(LGScore)
LG1 <- glm(QAResult ~ FreezePoint + MeltPoint + PressureResistance + BluntForceResistance + TorqueTest + TestsPerformedBeforeBreakage, family = "numeric")
